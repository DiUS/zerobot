{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Dupondi.us Continuous Integration. Create a CI environment stack using a single EC2 instance with Jenkins.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "CI Server EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ProjectName" : {
      "Description" : "Name of your project",
      "Type" : "String"
    },
    "ProjectGithubUser" : {
      "Description" : "Github User for the project",
      "Type" : "String"
    },
    "ProjectType" : {
      "Description" : "Tech stack of your project",
      "Type" : "String",
      "Default" : "grails"
    },
    "AwsAccessKey" : {
      "Description" : "The AWS Access Key",
      "Type" : "String"
    },
    "AwsSecretAccessKey" : {
      "Description" : "The AWS Secret acess key",
      "Type" : "String"
    },
    "SecretAccessKeyEnc" : {
      "Description" : "The AWS Secret acess key (encrypted)",
      "Type" : "String"
    },
    "PrivateKeyEnc" : {
      "Description" : "The private key of a key pair stored in EC2",
      "Type" : "String"
    },
    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters.",
      "Default" : "grails"
    },

    "DBUsername": {
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters.",
      "Default" : "grails"
    },

    "DBPassword": {
      "Description" : "Password MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters.",
      "Default" : "grails"
    },

    "DBRootPassword": {
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters.",
      "Default" : "r00tr00t"
    },
    "HostedZone" : {
      "Description" : "The DNS name of an existing Amazon Route 53 hosted zone",
      "Type" : "String",
      "Default" : "dupondi.us"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64HVM" },
      "cc2.8xlarge" : { "Arch" : "64HVM" },
      "cg1.4xlarge" : { "Arch" : "64HVM" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-31814f58", "64" : "ami-1b814f72", "64HVM" : "ami-0da96764" },
      "us-west-2"      : { "32" : "ami-38fe7308", "64" : "ami-30fe7300", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-11d68a54", "64" : "ami-1bd68a5e", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "ami-973b06e3", "64" : "ami-953b06e1", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-1" : { "32" : "ami-b4b0cae6", "64" : "ami-beb0caec", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "ami-0644f007", "64" : "ami-0a44f00b", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "ami-3e3be423", "64" : "ami-3c3be421", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },

  "Resources" : {


    "CIServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "gcc-c++"      : [],
                "make"         : [],
                "java-1.6.0-openjdk"   : [],
                "java-1.6.0-openjdk-devel"   : [],
                "mysql"        : [],
                "mysql-server" : [],
                "mysql-devel"  : [],
                "mysql-libs"   : []
              }
            },
            "files" : {
              "/usr/local/bin/cli53" : {
                "source" : "https://raw.github.com/barnybug/cli53/master/scripts/cli53",
                "mode"   : "000744",
                "owner"  : "root",
                "group"  : "root"
              },
              "/usr/sbin/update-route53-dns" : {
                "source" : "https://s3.amazonaws.com/dupondius/config/update-route53-dns",
                "mode"   : "000744",
                "owner"  : "root",
                "group"  : "root"
              },
              "/tmp/setup.mysql" : {
                "content" : { "Fn::Join" : ["", [
                  "CREATE USER '", { "Ref" : "DBUsername" }, "'@'localhost' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n",
                  "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUsername" }, "'@'localhost';\n",
                  "FLUSH PRIVILEGES;\n"
                    ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              }
            },
            "services" : {
              "sysvinit" : {
                "jenkins" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                },
                "mysqld" : {
                    "enabled"       : "true",
                    "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },

      "Properties": {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "FrontendGroup"} ],
        "Tags" : [ {"Key" : "dupondius:project", "Value" : { "Ref" : "ProjectName"} },
                   {"Key" : "dupondius:environment", "Value" : "ci" }
                 ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Give the deployer user login rights\n",
          "useradd -m deployer\n",
          "mkdir -p /home/deployer/.ssh\n",
          "echo \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyrBOE3zDQMcoRi9no60foxqEy7EVmAARowko6rERDXCp5tKrY3dOpk0wDyuZgvvq2gfaVRaUuwo1AJwJk43sFb6ZVxRwNZLjIF2dFV+RjQKy1NnPd9ymrZacIOyQXLzFUWsM59JPA6v8zznF826RSBuQIIGESz9n0lhICfO4oIq62Bexllh9O/vU71EKnzFxqq2StNCd5q/tit7AK0GiHnm2OyufBQrGhUjVrCDmXx2X9XX77swHky56z4ZgZk1XdC4EEHE4WariMzryjBPldCXkQGq5x97IC35aeCCVcyDAkQ+5HRxJK/Ja2RYy8f5bsmYRcI06suWGePUQO48Bjw==\" >> /home/deployer/.ssh/authorized_keys\n",
          "curl https://s3.amazonaws.com/private_keys/deployer.pem -o /home/deployer/.ssh/id_rsa\n",
          "chown -R deployer:deployer /home/deployer/.ssh\n",
          "chmod 600 /home/deployer/.ssh/id_rsa\n",
          "su - deployer -c \"ssh -o StrictHostKeyChecking=no git@github.com\"\n",

          "# Install Jenkins\n",
          "wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\n",
          "rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key\n",
          "yum install -y jenkins git Xvfb\n",

          "service jenkins stop\n",
          "mkdir -p /var/lib/jenkins/\n",
          "rm -rf /var/lib/jenkins/*\n",
          "mkdir /var/lib/jenkins/.ssh\n",
          "cp /home/deployer/.ssh/id_rsa /var/lib/jenkins/.ssh\n",
          "chown -R jenkins:jenkins /var/lib/jenkins/.ssh\n",
          "chmod 600 /var/lib/jenkins/.ssh/id_rsa\n",
          "sed -i 's/\\(Defaults\\s\\+requiretty\\)/#\\1/' /etc/sudoers\n",
          "sudo -u jenkins ssh -o StrictHostKeyChecking=no git@github.com\n",
          "su - deployer -c \"git clone -n --depth 1 git@github.com:uglyog/jenkins-config.git /var/tmp/git-tmp\"\n",
          "mv /var/tmp/git-tmp/.git /var/lib/jenkins/\n",
          "cd /var/lib/jenkins/\n",
          "git checkout ", { "Ref" : "ProjectType" } ,"\n",
          "sed -i 's/\\(<hudsonUrl>\\).*\\(<\\/hudsonUrl>\\)/\\1http:\\/\\/ci.", { "Ref" : "ProjectName" }, ".dupondi.us:8080\\/\\2/' hudson.tasks.Mailer.xml\n",
          "sed -i 's/\\(<projectUrl>\\).*\\(<\\/projectUrl>\\)/\\1https:\\/\\/github.com\\/", { "Ref" : "ProjectGithubUser" }, "\\/", { "Ref" : "ProjectName" } ,"\\2/' jobs/*/config.xml\n",
          "sed -i 's/\\(<url>git@github.com:\\).*\\(<\\/url>\\)/\\1", { "Ref" : "ProjectGithubUser" } ,"\\/", { "Ref" : "ProjectName" } ,".git\\2/' jobs/*/config.xml\n",
          "sed -i 's/\\([^.]*\\.\\).*\\(\\.dupondi\\.us\\)/\\1", { "Ref" : "ProjectName" } ,"\\2/' jobs/*/config.xml\n",
          "sed -i 's/dupondius-grails-skeleton/", { "Ref" : "ProjectName" } ,"/' jobs/*/config.xml\n",
          "sed -i 's/\\(<accessId>\\).*\\(<\\/accessId>\\)/\\1", { "Ref" : "AwsAccessKey" }, "\\2/' config.xml\n",
          "sed -i 's/\\(<secretKey>\\).*\\(<\\/secretKey>\\)/\\1", { "Ref" : "SecretAccessKeyEnc" }, "\\2/' config.xml\n",
          "sed -i 's/\\(<privateKey>\\).*\\(<\\/privateKey>\\)/\\1", { "Ref" : "PrivateKeyEnc" }, "\\2/' config.xml\n",
          "sed -i 's/dupondius-grails-skeleton/", { "Ref" : "ProjectName" } ,"/' jobs/*/config.xml\n",
          "chown -R jenkins:jenkins /var/lib/jenkins\n",
          "cd -\n",

          "# Install packages\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackName" }, " -r CIServer ",
          "    --access-key ", { "Ref" : "AwsAccessKey" },
          "    --secret-key ", { "Ref" : "AwsSecretAccessKey" },
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Setup MySQL root password and create a user\n",
          "mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "' || error_exit 'Failed to initialize root password'\n",
          "mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql || error_exit 'Failed to create database user'\n",

          "# Tools to support automated DNS update using Route53\n",
          "easy_install  -U boto\n",
          "easy_install  -U argparse\n",
          "easy_install  -U dnspython\n",
          "echo \"/usr/sbin/update-route53-dns\" >> /etc/rc.local\n",

          "#add new relic server monitoring\n",
          "rpm -uvh http://download.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm\n",
          "yum install newrelic-sysmond\n",

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"Jenkins CI application setup\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "CIServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "3000"
      }
    },

    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH and HTTP access via port 8080",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "8080",
          "ToPort" : "8080",
          "CidrIp" : "0.0.0.0/0"
        } ]

      }
    },

    "DNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" : [ "", [{"Ref" : "HostedZone"}, "." ]]},
        "Comment" : "CNAME to ci instance.",
        "Name" : { "Fn::Join" : [ "", ["ci", ".", {"Ref" : "ProjectName"}, ".", {"Ref" : "HostedZone"}, "."]]},
        "Type" : "CNAME",
        "TTL" : "900",
        "ResourceRecords" : [{ "Fn::GetAtt" : [ "CIServer", "PublicDnsName" ]}]
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", "ci", ".", {"Ref" : "ProjectName"}, ".", {"Ref" : "HostedZone"}, ":8080"]] },
      "Description" : "URL for newly created CI"
    }
  }
}
