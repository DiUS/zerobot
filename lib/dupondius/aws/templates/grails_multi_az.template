{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Dupondi.us. Grails Multi AZ. Create a highly available, scalable Grails stack with a multi-AZ MySQL Amazon RDS database instance for the backend data store. grails_multi_az.template",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ProjectName" : {
      "Description" : "Name of your project",
      "Type" : "String"
    },
    "EnvironmentName" : {
      "Description" : "Name of the environment",
      "Type" : "String"
    },
    "HostedZone" : {
      "Description" : "The DNS name of an existing Amazon Route 53 hosted zone",
      "Type" : "String",
      "Default" : "dupondi.us"
    },
    "AwsAccessKey" : {
      "Description" : "Your AWS access key",
      "Type" : "String"
    },
    "AwsSecretAccessKey" : {
      "Description" : "Your AWS secret access key",
      "Type" : "String"
    },
    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBAllocatedStorage": {
      "Default": "5",
      "Description" : "The size of the database (Gb) (minimum 5GB, maximum 1024 GB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },

    "DBInstanceClass": {
      "Default": "db.m1.small",
      "Description" : "The database instance type",
      "Type": "String",
      "AllowedValues" : [ "db.t1.micro", "db.m1.small", "db.m1.large", "db.m1.xlarge", "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge" ],
      "ConstraintDescription" : "must select a valid database instance type."
    },

    "MultiAZDatabase": {
      "Default": "true",
      "Description" : "Create a multi-AZ MySQL Amazon RDS database instance",
      "Type": "String",
      "AllowedValues" : [ "true", "false" ],
      "ConstraintDescription" : "must be either true or false."
    },

    "WebServerCapacity": {
      "Default": "2",
      "Description" : "The initial number of WebServer instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription" : "must be between 1 and 5 EC2 instances."
    },

    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64HVM" },
      "cc2.8xlarge" : { "Arch" : "64HVM" },
      "cg1.4xlarge" : { "Arch" : "64HVM" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-31814f58", "64" : "ami-1b814f72", "64HVM" : "ami-0da96764" },
      "us-west-2"      : { "32" : "ami-38fe7308", "64" : "ami-30fe7300", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-11d68a54", "64" : "ami-1bd68a5e", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "ami-973b06e3", "64" : "ami-953b06e1", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-1" : { "32" : "ami-b4b0cae6", "64" : "ami-beb0caec", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "ami-0644f007", "64" : "ami-0a44f00b", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "ami-3e3be423", "64" : "ami-3c3be421", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },

  "Resources" : {

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Metadata" : {
        "Comment" : "Configure the Load Balancer with a simple health check and cookie-based stickiness"
      },
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LBCookieStickinessPolicy" : [ {
          "PolicyName" : "CookieBasedPolicy",
          "CookieExpirationPeriod" : "30"
        } ],
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "8080",
          "Protocol" : "HTTP",
          "PolicyNames" : [ "CookieBasedPolicy" ]
        } ],
        "HealthCheck" : {
          "Target" : "HTTP:8080/status",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "5",
          "Interval" : "10",
          "Timeout" : "5"
        }
      }
    },

    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "5",
        "DesiredCapacity" : { "Ref" : "WebServerCapacity" },
        "Tags" : [ {"Key" : "dupondius:project", "Value" : { "Ref" : "ProjectName"}, "PropagateAtLaunch" : "true" },
                   {"Key" : "dupondius:environment", "Value" : { "Ref" : "EnvironmentName"}, "PropagateAtLaunch" : "true" }
                 ],
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      }
    },

    "LaunchConfig": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {

        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "gcc-c++"      : [],
                "make"         : [],
                "java-1.6.0-openjdk"   : [],
                "java-1.6.0-openjdk-devel"   : [],
                "tomcat7"     : [],
                "tomcat-native"     : [],
                "mysql"        : [],
                "mysql-devel"  : [],
                "mysql-libs"   : [],
                "git.x86_64"   : []
              }
            },
            "groups" : {
                "www" : {}
            },
            "users" : {
              "deployer" : {
                "groups" : ["www", "tomcat"],
                "homeDir" : "/home/deployer"
              }
            },
            "files" : {
              "/etc/tomcat7/tomcat7.conf" : {
                "content" : { "Fn::Join" : ["", [
                   "# System-wide configuration file for tomcat services\n",
                   "# This will be sourced by tomcat and any secondary service\n",
                   "# Values will be overridden by service-specific configuration\n",
                   "# files in /etc/sysconfig\n",
                   "#\n",
                   "# Use this one to change default values for all services\n",
                   "# Change the service specific ones to affect only one service\n",
                   "# (see, for instance, /etc/sysconfig/tomcat7)\n",
                   "#\n",
                   "\n",
                   "# Where your java installation lives\n",
                   "JAVA_HOME=\"/usr/lib/jvm/jre\"\n",
                   "\n",
                   "# Where your tomcat installation lives\n",
                   "CATALINA_BASE=\"/usr/share/tomcat7\"\n",
                   "CATALINA_HOME=\"/usr/share/tomcat7\"\n",
                   "JASPER_HOME=\"/usr/share/tomcat7\"\n",
                   "CATALINA_TMPDIR=\"/var/cache/tomcat7/temp\"\n",
                   "\n",
                   "# You can pass some parameters to java here if you wish to\n",
                   "# Use JAVA_OPTS to set java.library.path for libtcnative.so\n",
                   "JAVA_OPTS=\"-Xms768m -Xmx768m -XX:PermSize=512m -XX:MaxPermSize=512m -Djava.library.path=/usr/lib64\"\n",
                   "\n",
                   "# What user should run tomcat\n",
                   "TOMCAT_USER=\"tomcat\"\n",
                   "\n",
                   "# You can change your tomcat locale here\n",
                   "#LANG=\"en_US\"\n",
                   "\n",
                   "# Run tomcat under the Java Security Manager\n",
                   "SECURITY_MANAGER=\"false\"\n",
                   "\n",
                   "# Time to wait in seconds, before killing process\n",
                   "SHUTDOWN_WAIT=\"30\"\n",
                   "\n",
                   "# Whether to annoy the user with \"attempting to shut down\" messages or not\n",
                   "SHUTDOWN_VERBOSE=\"false\"\n",
                   "\n",
                   "# Set the TOMCAT_PID location\n",
                   "CATALINA_PID=\"/var/run/tomcat7.pid\"\n",
                   "\n",
                   "# Connector port is 8080 for this tomcat instance\n",
                   "CONNECTOR_PORT=\"8080\"\n",
                   "\n",
                   "# If you wish to further customize your tomcat environment,\n",
                   "# put your own definitions here\n",
                   "# (i.e. LD_LIBRARY_PATH for some jdbc drivers)\n"
                    ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/tomcat7/server.xml" : {
                "content" : { "Fn::Join" : ["", [
                    "<?xml version='1.0' encoding='utf-8'?>\n",
                    "<!--\n",
                    "  Licensed to the Apache Software Foundation (ASF) under one or more\n",
                    "  contributor license agreements.  See the NOTICE file distributed with\n",
                    "  this work for additional information regarding copyright ownership.\n",
                    "  The ASF licenses this file to You under the Apache License, Version 2.0\n",
                    "  (the \"License\"); you may not use this file except in compliance with\n",
                    "  the License.  You may obtain a copy of the License at\n",
                    "\n",
                    "      http://www.apache.org/licenses/LICENSE-2.0\n",
                    "\n",
                    "  Unless required by applicable law or agreed to in writing, software\n",
                    "  distributed under the License is distributed on an \"AS IS\" BASIS,\n",
                    "  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
                    "  See the License for the specific language governing permissions and\n",
                    "  limitations under the License.\n",
                    "-->\n",
                    "<!-- Note:  A \"Server\" is not itself a \"Container\", so you may not\n",
                    "     define subcomponents such as \"Valves\" at this level.\n",
                    "     Documentation at /docs/config/server.html\n",
                    " -->\n",
                    "<Server port=\"8005\" shutdown=\"SHUTDOWN\">\n",
                    "  <!-- Security listener. Documentation at /docs/config/listeners.html\n",
                    "  <Listener className=\"org.apache.catalina.security.SecurityListener\" />\n",
                    "  -->\n",
                    "  <!--APR library loader. Documentation at /docs/apr.html -->\n",
                    "  <Listener className=\"org.apache.catalina.core.AprLifecycleListener\" SSLEngine=\"on\" />\n",
                    "  <!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html -->\n",
                    "  <Listener className=\"org.apache.catalina.core.JasperListener\" />\n",
                    "  <!-- Prevent memory leaks due to use of particular java/javax APIs-->\n",
                    "  <Listener className=\"org.apache.catalina.core.JreMemoryLeakPreventionListener\" />\n",
                    "  <Listener className=\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\" />\n",
                    "  <Listener className=\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\" />\n",
                    "\n",
                    "  <!-- Global JNDI resources\n",
                    "       Documentation at /docs/jndi-resources-howto.html\n",
                    "  -->\n",
                    "  <GlobalNamingResources>\n",
                    "    <!-- Editable user database that can also be used by\n",
                    "         UserDatabaseRealm to authenticate users\n",
                    "    -->\n",
                    "    <Resource name=\"UserDatabase\" auth=\"Container\"\n",
                    "              type=\"org.apache.catalina.UserDatabase\"\n",
                    "              description=\"User database that can be updated and saved\"\n",
                    "              factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\"\n",
                    "              pathname=\"conf/tomcat-users.xml\" />\n",
                    "  </GlobalNamingResources>\n",
                    "\n",
                    "  <!-- A \"Service\" is a collection of one or more \"Connectors\" that share\n",
                    "       a single \"Container\" Note:  A \"Service\" is not itself a \"Container\",\n",
                    "       so you may not define subcomponents such as \"Valves\" at this level.\n",
                    "       Documentation at /docs/config/service.html\n",
                    "   -->\n",
                    "  <Service name=\"Catalina\">\n",
                    "\n",
                    "    <!--The connectors can use a shared executor, you can define one or more named thread pools-->\n",
                    "    <!--\n",
                    "    <Executor name=\"tomcatThreadPool\" namePrefix=\"catalina-exec-\"\n",
                    "        maxThreads=\"150\" minSpareThreads=\"4\"/>\n",
                    "    -->\n",
                    "\n",
                    "\n",
                    "    <!-- A \"Connector\" represents an endpoint by which requests are received\n",
                    "         and responses are returned. Documentation at :\n",
                    "         Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)\n",
                    "         Java AJP  Connector: /docs/config/ajp.html\n",
                    "         APR (HTTP/AJP) Connector: /docs/apr.html\n",
                    "         Define a non-SSL HTTP/1.1 Connector on port 8080\n",
                    "    -->\n",
                    "    <Connector port=\"8080\" protocol=\"HTTP/1.1\"\n",
                    "               connectionTimeout=\"20000\"\n",
                    "               redirectPort=\"8443\" />\n",
                    "    <!-- A \"Connector\" using the shared thread pool-->\n",
                    "    <!--\n",
                    "    <Connector executor=\"tomcatThreadPool\"\n",
                    "               port=\"8080\" protocol=\"HTTP/1.1\"\n",
                    "               connectionTimeout=\"20000\"\n",
                    "               redirectPort=\"8443\" />\n",
                    "    -->\n",
                    "    <!-- Define a SSL HTTP/1.1 Connector on port 8443\n",
                    "         This connector uses the JSSE configuration, when using APR, the\n",
                    "         connector should be using the OpenSSL style configuration\n",
                    "         described in the APR documentation -->\n",
                    "    <!--\n",
                    "    <Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n",
                    "               maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n",
                    "               clientAuth=\"false\" sslProtocol=\"TLS\" />\n",
                    "    -->\n",
                    "\n",
                    "    <!-- Define an AJP 1.3 Connector on port 8009 -->\n",
                    "    <Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n",
                    "\n",
                    "\n",
                    "    <!-- An Engine represents the entry point (within Catalina) that processes\n",
                    "         every request.  The Engine implementation for Tomcat stand alone\n",
                    "         analyzes the HTTP headers included with the request, and passes them\n",
                    "         on to the appropriate Host (virtual host).\n",
                    "         Documentation at /docs/config/engine.html -->\n",
                    "\n",
                    "    <!-- You should set jvmRoute to support load-balancing via AJP ie :\n",
                    "    <Engine name=\"Catalina\" defaultHost=\"localhost\" jvmRoute=\"jvm1\">\n",
                    "    -->\n",
                    "    <Engine name=\"Catalina\" defaultHost=\"localhost\">\n",
                    "\n",
                    "      <!--For clustering, please take a look at documentation at:\n",
                    "          /docs/cluster-howto.html  (simple how to)\n",
                    "          /docs/config/cluster.html (reference documentation) -->\n",
                    "\n",
                    "      <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\"/>\n",
                    "\n",
                    "\n",
                    "      <!-- Use the LockOutRealm to prevent attempts to guess user passwords\n",
                    "           via a brute-force attack -->\n",
                    "      <Realm className=\"org.apache.catalina.realm.LockOutRealm\">\n",
                    "        <!-- This Realm uses the UserDatabase configured in the global JNDI\n",
                    "             resources under the key \"UserDatabase\".  Any edits\n",
                    "             that are performed against this UserDatabase are immediately\n",
                    "             available for use by the Realm.  -->\n",
                    "        <Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\"\n",
                    "               resourceName=\"UserDatabase\"/>\n",
                    "      </Realm>\n",
                    "\n",
                    "      <Host name=\"localhost\"  appBase=\"webapps\"\n",
                    "            unpackWARs=\"true\" autoDeploy=\"true\">\n",
                    "\n",
                    "        <!-- SingleSignOn valve, share authentication between web applications\n",
                    "             Documentation at: /docs/config/valve.html -->\n",
                    "        <!--\n",
                    "        <Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" />\n",
                    "        -->\n",
                    "\n",
                    "        <!-- Access log processes all example.\n",
                    "             Documentation at: /docs/config/valve.html\n",
                    "             Note: The pattern used is equivalent to using pattern=\"common\" -->\n",
                    "        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n",
                    "               prefix=\"localhost_access_log.\" suffix=\".txt\"\n",
                    "               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n",
                    "\n",
                    "      </Host>\n",
                    "    </Engine>\n",
                    "  </Service>\n",
                    "</Server>\n"
                    ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/default/app" : {
               "content" : { "Fn::Join" : ["", [
                  "ENVIRONMENT_NAME=", { "Ref" : "EnvironmentName" }, "\n",
                  "PROJECT_NAME=", { "Ref" : "ProjectName" }, "\n",
                  "ZONE=", { "Ref" : "HostedZone" }, "\n",
                  "TTL=600\n",
                  "AWS_ACCESS_KEY_ID=", { "Ref" : "AwsAccessKey" }, "\n",
                  "AWS_SECRET_ACCESS_KEY=", { "Ref" : "AwsSecretAccessKey" }, "\n",
                  "DB_NAME=", { "Ref" : "DBName" }, "\n",
                  "DB_USERNAME=", { "Ref" : "DBUsername" }, "\n",
                  "DB_PASSWORD=", { "Ref" : "DBPassword" }, "\n",
                  "DB_HOST=", { "Fn::GetAtt": [ "MySQLDatabase", "Endpoint.Address" ] }, "\n",
                  "DB_PORT=", { "Fn::GetAtt": [ "MySQLDatabase", "Endpoint.Port" ] }, "\n",
                  "LOAD_BALANCER=", { "Ref" : "ElasticLoadBalancer" }, "\n"
                  ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/profile.d/dupondius.sh" : {
               "content" : { "Fn::Join" : ["", [
                  "source /etc/default/app\n"
                  ]]},
                "mode"  : "000755",
                "owner" : "root",
                "group" : "root"
              },
              "/home/deployer/.ssh/environment" : {
               "content" : { "Fn::Join" : ["", [
                  "DB_NAME=", { "Ref" : "DBName" }, "\n",
                  "DB_USERNAME=", { "Ref" : "DBUsername" }, "\n",
                  "DB_PASSWORD=", { "Ref" : "DBPassword" }, "\n",
                  "DB_HOST=", { "Fn::GetAtt": [ "MySQLDatabase", "Endpoint.Address" ] }, "\n",
                  "DB_PORT=", { "Fn::GetAtt": [ "MySQLDatabase", "Endpoint.Port" ] }, "\n",
                  "AWS_ELB_HOME=~/ElasticLoadBalancing\n"
                  ]]},
                "mode"  : "000644",
                "owner" : "deployer",
                "group" : "deployer"
              },
              "/home/deployer/deploy.sh" : {
               "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash -e \n",
                  "source /etc/default/app\n",
                  "export AWS_ELB_HOME=~/ElasticLoadBalancing\n",
                  "export LOAD_BALANCER=", { "Ref" : "ElasticLoadBalancer" }, "\n",
                  "/home/deployer/deploy-instance.sh\n"
                  ]]},
                "mode"  : "000770",
                "owner" : "deployer",
                "group" : "deployer"
              },
              "/home/deployer/deploy-instance.sh" : {
               "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash -e \n",
                  "chown :tomcat /var/tmp/", { "Ref" : "ProjectName" }, "*.war\n",
                  "mv /var/tmp/", { "Ref" : "ProjectName" }, "-*.war /var/lib/tomcat7/webapps/ROOT.war\n"
                  ]]},
                "mode"  : "000770",
                "owner" : "deployer",
                "group" : "deployer"
              }
            },
            "services" : {
              "sysvinit" : {
                "tomcat7" : {
                  "enabled" : "true",
                  "ensureRunning" : "true"
                }
              }
            }
          }
        }
      },

      "Properties": {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
        "KeyName"        : { "Ref" : "KeyName" },
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install packages\n",
          "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r LaunchConfig ",
          "    --access-key ", { "Ref" : "AwsAccessKey" },
          "    --secret-key ", { "Ref" : "AwsSecretAccessKey" },
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Allow the environment to the loaded for the deployer\n",
          "echo \"PermitUserEnvironment yes\" >> /etc/ssh/sshd_config\n",
          "/etc/init.d/sshd restart\n",

          "# Give the deployer user login rights\n",
          "chsh -s /bin/bash deployer\n",
          "chown deployer.deployer /home/deployer\n",
          "mkdir -p /home/deployer/.ssh\n",
          "echo \"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAyrBOE3zDQMcoRi9no60foxqEy7EVmAARowko6rERDXCp5tKrY3dOpk0wDyuZgvvq2gfaVRaUuwo1AJwJk43sFb6ZVxRwNZLjIF2dFV+RjQKy1NnPd9ymrZacIOyQXLzFUWsM59JPA6v8zznF826RSBuQIIGESz9n0lhICfO4oIq62Bexllh9O/vU71EKnzFxqq2StNCd5q/tit7AK0GiHnm2OyufBQrGhUjVrCDmXx2X9XX77swHky56z4ZgZk1XdC4EEHE4WariMzryjBPldCXkQGq5x97IC35aeCCVcyDAkQ+5HRxJK/Ja2RYy8f5bsmYRcI06suWGePUQO48Bjw==\" >> /home/deployer/.ssh/authorized_keys\n",
          "curl https://s3.amazonaws.com/private_keys/deployer.pem -o /home/deployer/.ssh/id_rsa\n",
          "chown -R deployer:deployer /home/deployer/.ssh\n",
          "chmod 600 /home/deployer/.ssh/id_rsa /home/deployer/.ssh/authorized_keys\n",
          "su - deployer -c \"ssh -o StrictHostKeyChecking=no git@github.com\"\n",

          "# Give the deployer sudo permission to the dashboard /etc/init.d scripts\n",
          "echo \"deployer ALL=(root)NOPASSWD:/bin/mv,/etc/init.d/tomcat7 *\" > /etc/sudoers.d/deployer\n",
          "chmod 0440 /etc/sudoers.d/deployer\n",

          "#add new relic server monitoring\n",
          "rpm -uvh http://download.newrelic.com/pub/newrelic/el5/i386/newrelic-repo-5-3.noarch.rpm\n",
          "yum install -y newrelic-sysmond\n",

          "#set newrelic license key\n",
          "/usr/sbin/nrsysmond-config --set license_key=$NEW_RELIC_LICENSE_KEY\n",
          "echo \"/usr/sbin/nrsysmond-config --set license_key=\\$NEW_RELIC_LICENSE_KEY\" >> /etc/rc.local\n",
          "echo \"/etc/init.d/newrelic-sysmond restart\" >> /etc/rc.local\n",

          "curl http://download.newrelic.com/newrelic/java-agent/newrelic-api/2.8.0/newrelic_agent2.8.0.zip > /tmp/newrelic_agent2.8.0.zip\n",
          "unzip /tmp/newrelic_agent2.8.0.zip -d /usr/share/tomcat7\n",

          "curl http://ec2-downloads.s3.amazonaws.com/ElasticLoadBalancing.zip > /tmp/ElasticLoadBalancing.zip\n",
          "sudo -u deployer unzip /tmp/ElasticLoadBalancing.zip -d /home/deployer\n",
          "sudo -u deployer ln -s /home/deployer/ElasticLoadBalancing* /home/deployer/ElasticLoadBalancing\n",

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"Environment setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServerGroup",
      "Properties" : {
        "Handle"  : {"Ref" : "WaitHandle"},
        "Timeout" : "1500"
      }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80 locked down to the load balancer + SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},"SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "GroupDescription": "Grant database access to web server",
        "DBSecurityGroupIngress": {
          "EC2SecurityGroupName": { "Ref": "WebServerSecurityGroup" }
        }
      }
    },

    "MySQLDatabase": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine" : "MySQL",
        "DBName" : { "Ref": "DBName" },
        "MultiAZ" : { "Ref": "MultiAZDatabase" },
        "MasterUsername": { "Ref": "DBUsername" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "DBInstanceClass": { "Ref" : "DBInstanceClass" },
        "DBSecurityGroups": [ { "Ref": "DBSecurityGroup" } ],
        "AllocatedStorage": { "Ref" : "DBAllocatedStorage" }
      }
    },

    "DNSRecord" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : { "Fn::Join" : [ "", [{"Ref" : "HostedZone"}, "." ]]},
        "Comment" : "CNAME for the load balancer.",
        "Name" : { "Fn::Join" : [ "", [{"Ref" : "EnvironmentName"}, ".", {"Ref" : "ProjectName"}, ".", {"Ref" : "HostedZone"}, "."]]},
        "Type" : "CNAME",
        "TTL" : "300",
        "ResourceRecords" : [{ "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]
      }
    }
  },

  "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]] },
      "Description" : "URL for newly created Rails application"
    }
  }
}
