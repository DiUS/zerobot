{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Zerobot dashboard template. Single instance Rails stack using with nginx, a local MySQL database. rails_dashboard.template",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "Description" : "Password MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBRootPassword": {
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" },
      "cc1.4xlarge" : { "Arch" : "64HVM" },
      "cc2.8xlarge" : { "Arch" : "64HVM" },
      "cg1.4xlarge" : { "Arch" : "64HVM" }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-31814f58", "64" : "ami-1b814f72", "64HVM" : "ami-0da96764" },
      "us-west-2"      : { "32" : "ami-38fe7308", "64" : "ami-30fe7300", "64HVM" : "NOT_YET_SUPPORTED" },
      "us-west-1"      : { "32" : "ami-11d68a54", "64" : "ami-1bd68a5e", "64HVM" : "NOT_YET_SUPPORTED" },
      "eu-west-1"      : { "32" : "ami-973b06e3", "64" : "ami-953b06e1", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-1" : { "32" : "ami-b4b0cae6", "64" : "ami-beb0caec", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-southeast-2" : { "32" : "ami-b3990e89", "64" : "ami-bd990e87", "64HVM" : "NOT_YET_SUPPORTED" },
      "ap-northeast-1" : { "32" : "ami-0644f007", "64" : "ami-0a44f00b", "64HVM" : "NOT_YET_SUPPORTED" },
      "sa-east-1"      : { "32" : "ami-3e3be423", "64" : "ami-3c3be421", "64HVM" : "NOT_YET_SUPPORTED" }
    }
  },

  "Resources" : {


    "WebServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "dupondius::template" : "rails_single_instance",
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "gcc-c++"      : [],
                "make"         : [],
                "libcurl-devel.x86_64" : [],
                "ruby19-devel.x86_64" :[],
                "rubygems19"     : [],
                "libxml2"      : [],
                "libxml2-devel" : [],
                "libxslt"       : [],
                "libxslt-devel" : [],
                "mysql"        : [],
                "mysql-server" : [],
                "mysql-devel"  : [],
                "mysql-libs"   : [],
                "nginx"         : [],
                "git.x86_64"    : []
              }
            },
            "files" : {
              "/usr/sbin/update-route53-dns" : {
                "source" : "https://s3.amazonaws.com/dupondius_config/update-route53-dns",
                "mode"   : "000744",
                "owner"  : "root",
                "group"  : "root"
              },
              "/usr/sbin/configure-nginx" : {
                "source" : "https://s3.amazonaws.com/dupondius_config/configure-nginx",
                "mode"   : "000744",
                "owner"  : "root",
                "group"  : "root"
              },
              "/etc/nginx/nginx.conf" : {
                "source" : "https://s3.amazonaws.com/dupondius_config/nginx.conf",
                "mode"   : "000644",
                "owner"  : "root",
                "group"  : "root"
              },
              "/tmp/setup.mysql" : {
                "content" : { "Fn::Join" : ["", [
                  "CREATE USER '", { "Ref" : "DBUsername" }, "'@'localhost' IDENTIFIED BY '", { "Ref" : "DBPassword" }, "';\n",
                  "GRANT ALL ON ", { "Ref" : "DBName" }, ".* TO '", { "Ref" : "DBUsername" }, "'@'localhost';\n",
                  "FLUSH PRIVILEGES;\n"
                    ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/default/app" : {
               "content" : { "Fn::Join" : ["", [
                  "ENVIRONMENT_NAME=dashboard\n",
                  "TTL=60\n",
                  "DB_NAME=", { "Ref" : "DBName" }, "\n",
                  "DB_USERNAME=", { "Ref" : "DBUsername" }, "\n",
                  "DB_PASSWORD=", { "Ref" : "DBPassword" }, "\n",
                  "DB_SOCKET=/var/lib/mysql/mysql.sock\n"
                  ]]},
                "mode"  : "000644",
                "owner" : "root",
                "group" : "root"
            }
          },
          "services" : {
            "sysvinit" : {
              "mysqld" : {
                "enabled"       : "true",
                "ensureRunning" : "true"
              }
              }
            }
          }
        }
      },

      "Properties": {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "SecurityGroups" : [ {"Ref" : "FrontendGroup"} ],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install Rails packages\n",
          "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r WebServer ",
          "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Setup MySQL root password and create a user\n",
          "mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "' || error_exit 'Failed to initialize root password'\n",
          "mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql || error_exit 'Failed to create database user'\n",

          "# Allow the environment to the loaded for the deployer\n",
          "echo \"PermitUserEnvironment yes\" >> /etc/ssh/sshd_config\n",
          "/etc/init.d/sshd restart\n",

          "# Use Ruby 1.9\n",
          "rm /usr/bin/ruby\n",
          "ln -s /usr/bin/ruby1.9 /usr/bin/ruby\n",
          "ln -s /usr/bin/gem1.9 /usr/bin/gem\n",
          "gem install bundler --no-rdoc --no-ri\n",

          "# Install the dashboard\n",
          "curl -L https://s3.amazonaws.com/dupondius_config/install-dashboard | bash\n",

          "# Tools to support automated DNS update using Route53\n",
          "easy_install  -U pip\n",
          "pip install cli53\n",

          "echo \"/usr/sbin/update-route53-dns\" >> /etc/rc.local\n",

          "# Configure nginx\n",
          "/usr/sbin/configure-nginx zerobot\n",

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"Dashboard application setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "1500"
      }
    },

    "FrontendGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH and HTTP access",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : "0.0.0.0/0"
        } ]

      }
    }
  }
}
